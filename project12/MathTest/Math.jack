// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i;

        let n = 16;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;

        let i = 1;
        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }

        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < n) {
            if (~((y & powersOfTwo[i]) = 0)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q, res, isPos;

        // handle negative numbers
        let isPos = 1;
        if (x < 0) {
            let x = -x;
            let isPos = -isPos;
        }
        if (y < 0) {
            let y = -y;
            let isPos = -isPos;
        }

        // base case
        if ((y > x) | (y < 0)) {
            return 0;
        }

        // recursion
        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) { // remainder of rec div < y
            let res = 2 * q;
        } else { // remainder >= y
            let res = 2 * q + 1;
        }

        return res * isPos;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int y, i, res;
    	
        let i = (n / 2) - 1;
    	
        // build the result bit by bit, starting from the biggest power of 2 possible
        while (~(i < 0)) {
    		let res = ((y + powersOfTwo[i]) * (y + powersOfTwo[i]));
    		
            if ((~(res > x)) & (res > 0)) {
    			let y = y + powersOfTwo[i];
    		}
    		
            let i = i - 1;
    	}

    	return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }

        return x;
    }
}
