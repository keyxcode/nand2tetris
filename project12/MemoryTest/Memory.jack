// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, lastFree;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;

        let heap[0] = 0; // next free block add
        let heap[1] = 14335; // free block size
        let lastFree = heap;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int neededSize, block;
        var Array curr;

        let neededSize = size + 2; // needs to account for a next and a size header
        let curr = heap;

        // find first fit block
        while (~(curr = 0)) {
            if (~(curr[1] < neededSize)) {
                let block = curr + curr[1] - neededSize + 2;
                let curr[1] = curr[1] - neededSize;
                
                let block[0] = 0;
                let block[1] = size;

                return block + 2;
            } else {
                let curr = curr[0];
            }
        }

        // error
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let lastFree[0] = o - 2;
        let lastFree = o;

        return;
    }    
}
