// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength > 0)) {
            let maxLength = 1;
        }
        
        let str = Array.new(maxLength);
        let len = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
    	do Memory.deAlloc(str);
    	return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    	let str[len] = c;
    	let len = len + 1;
    	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    	var int num, i, isPos;
    	
        let isPos = 1;
    	if (str[i] = 45) { // neg sign
            let isPos = -1;
            let i = i + 1;
        }

    	while ((i < len) & ~((str[i] > 57) | (str[i] < 48))) {
            let num = (num * 10) + (str[i] - 48);
            let i = i + 1;
    	}

    	return num * isPos;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    	let len = 0;
    	
        if (val < 0) { // neg
            do appendChar(45);
            let val = -val;
        }
        
        do recSetInt(val);

    	return;
    }

    /* This helper function helps deal with the fact that we have to append the last digit first in the string, without the use of a built-in stack data structure. */
    method void recSetInt(int val) {
        var int digit, c;

        if (val = 0) {
            return;
        }

        let digit = val - ((val / 10) * 10);
        let c = digit + 48;
        do recSetInt(val / 10);
        do appendChar(c);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
