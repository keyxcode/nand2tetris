// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int maxRow, maxCol;
    static Array screen;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let maxRow = 256;
        let maxCol = 512;
        let screen = 16384;
        
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    	var int i;
    	
        // the screen has a total of 8192 pixels mapped to 8192 bits in RAM starting from the screen base
        while (i < 8192) {
    		let screen[i] = 0;
    		let i = i + 1;
    	}
    	
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
    	let color = b;
    	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    	var int word, mask;
    	
        let word = (32 * y) + (x / 16);
        // bit mask that has only the ith bit that we want to draw set
    	let mask = Math.powerOfTwo(Math.mod(x, 16));
    	
        if (color) {
    		let screen[word] = screen[word] | mask;
    	} else {
    		let screen[word] = screen[word] & (~mask);
		}

    	return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, down, right, diff;

        let down = 0;
        let right = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        if (dx < 0) { // swap points recursively if x1 < x2
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        if(dy = 0) { // horizontal
            while (x1 < x2) {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1;
            }
            return;
        }
        
        if (dx = 0) { // vertical
            while (y1 > y2) { // s -> n 
                do Screen.drawPixel(x1, y1);
                let y1 = y1 - 1;
            }
            while (y1 < y2) { // n -> s
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }
            return;
        }

        if (dy < 0) { // sw -> ne
            let dy = Math.abs(dy);
            while ((~(right > dx)) & (~(down > dy))) {
                do Screen.drawPixel(x1 + right, y1 - down);
                
                if (diff < 0) {
                    let down = down + 1;
                    let diff = diff + dx;
                } else {
                    let right = right + 1;
                    let diff = diff - dy;
                }
            }
            return;
        }

        while ((~(right > dx)) & (~(down > dy))) { // nw -> se
            do Screen.drawPixel(x1 + right, y1 + down);
            
            if (diff < 0) {
                let down = down + 1;
                let diff = diff + dx;
            } else {
                let right = right + 1;
                let diff = diff - dy;
            }
        }

        return; 
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while (y1 < y2) {
			do Screen.drawLine(x1, y1, x2, y1);
			let y1 = y1 + 1;
		}
    	return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int a, dy;

		let dy = -r;
		
        while (dy < r) {
			let a = Math.sqrt((r * r) - (dy * dy));
			do Screen.drawLine(x - a, y + dy, x + a, y + dy);
			let dy = dy + 1;
		}
    	return;
    }
}
